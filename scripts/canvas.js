// Generated by CoffeeScript 1.7.1
(function() {
  var CanvasObjects, Container, Note, canvas, ctx, fab, loadSVG, note, note2, note3, scalingFactor,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  canvas = document.getElementById("test");

  CanvasObjects = (function() {
    function CanvasObjects(ctx, canvas) {
      this.ctx = ctx;
      this.canvas = canvas;
      this.add = __bind(this.add, this);
      this.clear = __bind(this.clear, this);
      this.draw = __bind(this.draw, this);
      this.elements = [];
      this.changed = true;
    }

    CanvasObjects.prototype.draw = function() {
      var element, _i, _len, _ref, _results;
      if (this.changed) {
        this.clear();
        _ref = this.elements;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          element = _ref[_i];
          _results.push(element.draw());
        }
        return _results;
      }
    };

    CanvasObjects.prototype.clear = function() {
      return this.ctx.clearRect(-0.5, -0.5, this.canvas.width, this.canvas.height);
    };

    CanvasObjects.prototype.add = function(element) {
      this.elements.push(element);
      return this.changed = true;
    };

    return CanvasObjects;

  })();

  Note = (function() {
    function Note(container, x, y, radius) {
      this.container = container;
      this.x = x;
      this.y = y;
      this.radius = radius;
      this.randomize = __bind(this.randomize, this);
      this.moveTo = __bind(this.moveTo, this);
      this.draw = __bind(this.draw, this);
    }

    Note.prototype.draw = function() {
      var ctx, lineWidth, path, stemLength;
      ctx = this.container.ctx;
      path = new Path2D();
      lineWidth = Math.floor(this.radius * 0.4);
      stemLength = this.radius * 4;
      path.arc(this.x, this.y, this.radius, 0, Math.PI * 2, true);
      ctx.lineWidth = lineWidth;
      ctx.fillStyle = "rgb(0, 0, 0)";
      ctx.fill(path);
      path = new Path2D();
      path.moveTo(this.x + this.radius - lineWidth / 2, this.y);
      path.lineTo(this.x + this.radius - lineWidth / 2, this.y - stemLength);
      return ctx.stroke(path);
    };

    Note.prototype.moveTo = function(x, y) {
      this.x = x;
      this.y = y;
      return this.container.changed = true;
    };

    Note.prototype.randomize = function() {
      var maxX, maxY, minX, minY, x, y;
      maxX = this.container.canvas.width;
      maxY = this.container.canvas.height;
      minX = 10;
      minY = 50;
      x = Math.random() * (maxX - minX) + minX;
      y = Math.random() * (maxY - minY) + minY;
      return this.moveTo(x, y);
    };

    return Note;

  })();

  if (canvas.getContext) {
    ctx = canvas.getContext("2d");
    ctx.translate(0.5, 0.5);
    Container = new CanvasObjects(ctx, canvas);
    note = new Note(Container, 150, 150, 10);
    note2 = new Note(Container, 50, 50, 20);
    note3 = new Note(Container, 250, 250, 15);
    Container.add(note);
    Container.add(note2);
    Container.add(note3);
    setInterval(Container.draw, 30);
    setInterval(note.randomize, 3000);
    setInterval(note2.randomize, 3000);
    setInterval(note3.randomize, 3000);
  }

  fab = new fabric.Canvas("fab");

  scalingFactor = 0.05;

  loadSVG = function(object, options) {
    var group;
    group = fabric.util.groupSVGElements(object, options);
    group.scale(scalingFactor);
    return fab.add(group).renderAll();
  };

  fabric.loadSVGFromURL("./images/notehead.svg", loadSVG);

  fabric.loadSVGFromURL("./images/Music-staff.svg", loadSVG);

  fabric.loadSVGFromURL("./images/Treble.svg", loadSVG);

  fabric.loadSVGFromURL("./images/Bass.svg", loadSVG);

  window.canvas = fab;

}).call(this);
